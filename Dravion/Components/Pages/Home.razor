@page "/"
@rendermode InteractiveServer
@using Dravion.Components.Widget
@using Models
@using static Dravion.Models.MinecraftContent

<PageTitle>Dravion</PageTitle>

<header class="header">
    <h1 style="text-align: left; padding-left: 20px;">Tenova</h1>
</header>
<div class="container">
    <div class="main-content">
        <div class="search-section">
            <div class="search-bar">
                <input type="search" id="search-input" placeholder="Search for Minecraft projects..." @bind="searchTerm" @bind:event="oninput" />
            </div>
        </div>

        <div class="filter-section">
            <select id="content-type" @onchange="OnContentTypeChanged">
                @foreach (var type in Enum.GetValues(typeof(ItemType)))
                {
                    <option value="@type.ToString().ToLower()">@type</option>
                }
            </select>
            <select>
                <option>Featured</option>
            </select>
        </div>

        <div class="mod-list" id="content-list">
            @if (ItemLists == null || !ItemLists.Any())
            {
                if (isLoading)
                {
                    <!-- Muestra esqueletos mientras se carga -->
                    for (int i = 0; i < 5; i++)
                    {
                        <div class="mod-card skeleton"></div>
                    }
                }
                else
                {
                    <!-- Muestra un mensaje si no hay elementos -->
                    <div class="empty-state">No hay elementos disponibles.</div>
                }
            }
            else
            {
                <!-- Muestra los elementos filtrados por tipo -->
                @foreach (var item in FilterItemsByType(searchTerm, SelectedContentType))
                {
                    <ItemCard Item="item"
                              IsAdded="IsItemAdded(item)"
                              IsBlocked="IsItemBlocked(item)"
                              IsInSelectedList="false"
                              OnToggle="ToggleItem"
                              OnRemove="ToggleItem" />
                }
            }
        </div>

        <div id="pagination" class="pagination">
            <!-- La paginación se insertará dinámicamente aquí -->
        </div>
        <div class="bottom-spacing"></div>
    </div>

    <div class="separator" id="separator"></div>

    <div class="sidebar">
        <div class="sidebar-header">
            <div class="sidebar-selectors">
                <div class="custom-select" style="flex: 2;">
                    <div class="custom-select-header" id="item-lists-header" @onclick="ToggleItemListsDropdown">
                        <span>@(SelectedList?.Name ?? "Select Item List")</span>
                        <i data-lucide="chevron-down"></i>
                    </div>
                    <div class="custom-select-options" id="item-lists-options" style="@(showItemListsDropdown ? "display: block;" : "display: none;")">
                        @foreach (var list in ItemLists)
                        {
                            <div class="custom-select-option" @onclick="() => SelectItemList(list)">
                                <span>@list.Name</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="dropdown" style="flex: 1;">
                    <select id="minecraft-versions">
                        <option value="">Select Version</option>
                        <!-- Las versiones de Minecraft se insertarán dinámicamente aquí -->
                    </select>
                </div>
            </div>
        </div>
        <div class="sidebar-content">
            <div class="stats">
                <button class="stat-item" data-type="mods" data-tooltip="Mods" @onclick="() => SelectContentType(ItemType.Mods)">
                    <i data-lucide="box"></i>
                    <span id="mods-count">@GetItemCount(ItemType.Mods)</span>
                </button>
                <button class="stat-item" data-type="plugins" data-tooltip="Plugins" @onclick="() => SelectContentType(ItemType.Plugins)">
                    <i data-lucide="plug"></i>
                    <span id="plugins-count">@GetItemCount(ItemType.Plugins)</span>
                </button>
                <button class="stat-item" data-type="shaders" data-tooltip="Shaders" @onclick="() => SelectContentType(ItemType.Shaders)">
                    <i data-lucide="palette"></i>
                    <span id="shaders-count">@GetItemCount(ItemType.Shaders)</span>
                </button>
                <button class="stat-item" data-type="resourcepacks" data-tooltip="Resource Packs" @onclick="() => SelectContentType(ItemType.ResourcePacks)">
                    <i data-lucide="image"></i>
                    <span id="resourcepacks-count">@GetItemCount(ItemType.ResourcePacks)</span>
                </button>
                <button class="stat-item" data-type="worlds" data-tooltip="Worlds" @onclick="() => SelectContentType(ItemType.Worlds)">
                    <i data-lucide="globe"></i>
                    <span id="worlds-count">@GetItemCount(ItemType.Worlds)</span>
                </button>
            </div>
            <div id="selected-items">
                @if (SelectedList != null && SelectedList.Items.ContainsKey(SelectedContentType.ToString().ToLower()))
                {
                    @if (SelectedList.Items[SelectedContentType.ToString().ToLower()].Any())
                    {
                        @foreach (var item in SelectedList.Items[SelectedContentType.ToString().ToLower()])
                        {
                            <ItemCard Item="item"
                                      IsAdded="true"
                                      IsBlocked="IsItemBlocked(item)"
                                      IsInSelectedList="true"
                                      OnToggle="ToggleItem"
                                      OnRemove="ToggleItem" />
                        }
                    }
                    else
                    {
                        <div class="empty-state">No hay elementos de este tipo en la lista seleccionada.</div>
                    }
                }
                else
                {
                    <div class="empty-state">No hay elementos de este tipo en la lista seleccionada.</div>
                }
            </div>
            <div class="action-selector">
                <label for="item-selector">Seleccionar items para acción:</label>
                <select id="item-selector">
                    <option value="all">Todos los items</option>
                    @foreach (var type in Enum.GetValues(typeof(ItemType)))
                    {
                        <option value="@type.ToString().ToLower()">@type</option>
                    }
                </select>
            </div>
            <div class="action-buttons">
                <button class="action-button" id="download-button">Descargar</button>
                <button class="action-button" id="export-button">Exportar</button>
            </div>
        </div>
    </div>
</div>